"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertData = exports.idFactory = exports.convertParticipantResult = exports.convertParticipant = exports.convertMatchStatus = exports.convertRoundRobinMode = exports.convertStageSettings = exports.convertStageType = void 0;
const brackets_model_1 = require("brackets-model");
/**
 * Converts a Toornament stage type.
 *
 * @param type Type of the stage.
 */
function convertStageType(type) {
    switch (type) {
        case 'pools':
            return 'round_robin';
        case 'single_elimination':
        case 'double_elimination':
            return type;
        default:
            throw Error('Stage type not supported.');
    }
}
exports.convertStageType = convertStageType;
/**
 * Converts Toornament stage settings.
 *
 * @param settings Settings of the stage.
 */
function convertStageSettings(settings) {
    return {
        size: settings.size,
        groupCount: settings.nb_groups,
        grandFinal: settings.grand_final,
        skipFirstRound: settings.skip_round1,
        consolationFinal: settings.third_decider,
        roundRobinMode: convertRoundRobinMode(settings.pairing_method),
    };
}
exports.convertStageSettings = convertStageSettings;
/**
 * Converts a Toornament round-robin mode.
 *
 * @param method Pairing method.
 */
function convertRoundRobinMode(method) {
    switch (method) {
        case 'standard':
            return 'simple';
        case 'double_standard':
            return 'double';
        default:
            return undefined;
    }
}
exports.convertRoundRobinMode = convertRoundRobinMode;
/**
 * Converts a Toornament match status.
 *
 * @param status Status of the match.
 */
function convertMatchStatus(status) {
    switch (status) {
        case 'pending':
            // Use waiting because it ressembles to the name.
            return brackets_model_1.Status.Waiting;
        case 'running':
            return brackets_model_1.Status.Running;
        case 'completed':
            // Use completed because it ressembles to the name.
            return brackets_model_1.Status.Completed;
    }
}
exports.convertMatchStatus = convertMatchStatus;
/**
 * Converts a Toornament participant.
 *
 * @param id ID of the participant.
 * @param participant Toornament participant.
 */
function convertParticipant(id, participant) {
    return {
        id,
        name: participant.name,
        tournament_id: 0,
    };
}
exports.convertParticipant = convertParticipant;
/**
 * Converts a Toornament participant result.
 *
 * @param id ID of the participant.
 * @param source Source of the participant.
 * @param result Result of the participant.
 */
function convertParticipantResult(id, source, result) {
    return {
        id,
        position: source,
        score: result.score !== null ? result.score : undefined,
        forfeit: result.forfeit || undefined,
        result: result.result || undefined,
    };
}
exports.convertParticipantResult = convertParticipantResult;
/**
 * Creates an ID factory, which returns the existing ID or a new incremental ID corresponding to a Toornament ID.
 */
function idFactory() {
    let currentId = 0;
    const ids = {};
    const func = (id) => {
        if (ids[id] === undefined)
            ids[id] = currentId++;
        return ids[id];
    };
    func.getMapping = () => ids;
    return func;
}
exports.idFactory = idFactory;
/**
 * Converts Toornament data to brackets-viewer data.
 *
 * @param data Data coming from Toornament put in a single object.
 * @param data.tournament_id ID of the tournament.
 * @param data.stages List of stages.
 * @param data.matches List of matches.
 */
function convertData(data) {
    const db = {
        stage: [],
        match: [],
        match_game: [],
        participant: [],
    };
    const stageId = idFactory();
    for (const stage of data.stages) {
        db.stage.push({
            id: stageId(stage.id),
            tournament_id: 0,
            name: stage.name,
            type: convertStageType(stage.type),
            number: stage.number,
            settings: convertStageSettings(stage.settings),
        });
    }
    const participants = {};
    const participantId = idFactory();
    const matchId = idFactory();
    const groupId = idFactory();
    const roundId = idFactory();
    /**
     * Finds the source position of a participant based on the the source match number.
     *
     * @param result Result of the participant.
     */
    function findSourcePosition(result) {
        if (!result.source_node_id)
            return undefined;
        const sourceMatchId = result.source_node_id;
        const sourceMatch = db.match.find(match => match.id === matchId(sourceMatchId));
        if (!sourceMatch)
            throw Error('Source match not found.');
        return sourceMatch.number;
    }
    for (const match of data.matches) {
        const [id1, id2] = match.opponents.map(opponent => { var _a; return ((_a = opponent.participant) === null || _a === void 0 ? void 0 : _a.id) !== undefined ? participantId(opponent.participant.id) : null; });
        if (id1 !== null && match.opponents[0].participant) {
            const opponent1 = convertParticipant(id1, match.opponents[0].participant);
            if (!participants[opponent1.id])
                participants[opponent1.id] = opponent1;
        }
        if (id2 !== null && match.opponents[1].participant) {
            const opponent2 = convertParticipant(id2, match.opponents[1].participant);
            if (!participants[opponent2.id])
                participants[opponent2.id] = opponent2;
        }
        db.match.push({
            id: matchId(match.id),
            stage_id: stageId(match.stage_id),
            group_id: groupId(match.group_id),
            round_id: roundId(match.round_id),
            number: match.number,
            child_count: 0,
            status: convertMatchStatus(match.status),
            opponent1: convertParticipantResult(id1, findSourcePosition(match.opponents[0]), match.opponents[0]),
            opponent2: convertParticipantResult(id2, findSourcePosition(match.opponents[1]), match.opponents[1]),
        });
    }
    Object.values(participants).forEach(participant => db.participant.push(participant));
    return {
        database: db,
        mappings: {
            tournament: { [data.tournament_id]: 0 },
            stages: stageId.getMapping(),
            groups: groupId.getMapping(),
            rounds: roundId.getMapping(),
            matches: matchId.getMapping(),
            participants: participantId.getMapping(),
        },
    };
}
exports.convertData = convertData;
//# sourceMappingURL=convert.js.map